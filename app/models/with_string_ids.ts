import { BaseModel, beforeCreate, column } from "@adonisjs/lucid/orm";
import { type NormalizeConstructor } from "@adonisjs/core/types/helpers";
import { generateID } from "#helpers/generateID";

/**
 * Typescript mixin to set up the primary key of a Model to be `id` with the type of `string` and set to auto-assign itself on creation (via the `@beforeCreate` Lucid hook) to a CUID, generated by `@paralleldrive/cuid2`.
 */
export function WithStringID<
  Model extends NormalizeConstructor<typeof BaseModel>,
>(superclass: Model) {
  class ModelWithStringID extends superclass {
    /** assign primary key manually with a @beforeCreate hook below so that we can generate a string UUID ourselves instead of using an auto-incrementing integer */
    static selfAssignPrimaryKey = true;

    @column({ isPrimary: true })
    declare id: string;

    @beforeCreate()
    static assignId<T extends typeof ModelWithStringID>(
      this: T,
      model: InstanceType<T>,
    ) {
      model.id = generateID();
    }
  }

  return ModelWithStringID;
}
